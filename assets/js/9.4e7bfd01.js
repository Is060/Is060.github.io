(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{210:function(a,e,t){"use strict";t.r(e);var s=t(0),r=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"cmake"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cmake"}},[a._v("#")]),a._v(" CMake")]),a._v(" "),t("h2",{attrs:{id:"一-gcc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-gcc"}},[a._v("#")]),a._v(" 一 GCC")]),a._v(" "),t("p",[a._v("GCC全称是GNU Compiler Collection，是一个编译套件。我们可以通过gcc/g++来编译目标项目。\n但是当项目结构复杂时，通过gcc/g++命令直接编译会出现非常多不便之处，于是出现了Makefile。")]),a._v(" "),t("h2",{attrs:{id:"二-makefile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-makefile"}},[a._v("#")]),a._v(" 二 Makefile")]),a._v(" "),t("p",[a._v("简单地说Makefile就是一个包含一堆有条理的gcc/g++编译命令的文件，便于提高开发者的工作效率。\nMakefile是需要开发者自己"),t("strong",[a._v("手写")]),a._v("的。\n那之前可以通过在终端输入gcc/g++命令来编译项目，现在有了Makefile，又要怎么用呢？\n这就讲到Make工具了。")]),a._v(" "),t("h2",{attrs:{id:"三-make"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-make"}},[a._v("#")]),a._v(" 三 Make")]),a._v(" "),t("p",[a._v("Make工具就是“读取”并执行Makefile文件中的编译指令，从而进行项目编译。")]),a._v(" "),t("h2",{attrs:{id:"四-cmakelists"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-cmakelists"}},[a._v("#")]),a._v(" 四 CMakelists")]),a._v(" "),t("p",[a._v("当项目非常庞大，目录结构非常复杂时，手写Makefile就是一件非常恐怖的事情了，你需要在不同的目录底下写不同的Makefile，这可能有非常多个。\n这时候就有CMakelists来拯救开发者了。CMakelists可以通过更简单的写法来生成对应的Makefile文件。\n怎么生成呢？就是写好CMakelists.txt之后，通过CMake工具生成。")]),a._v(" "),t("h2",{attrs:{id:"五-cmake"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五-cmake"}},[a._v("#")]),a._v(" 五 CMake")]),a._v(" "),t("p",[a._v("类似Make工具的功能，CMake工具就是“读取”并执行CMakelists.txt文件中的语句，来生成对应的Makefile。然后开发者就可以通过Make工具来“执行”Makefile了。")])])}),[],!1,null,null,null);e.default=r.exports}}]);