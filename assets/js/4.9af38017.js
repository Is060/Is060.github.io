(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{202:function(t,a,s){t.exports=s.p+"assets/img/version-1.322dd902.322dd902.png"},203:function(t,a,s){t.exports=s.p+"assets/img/day01_8_1.1f4b0d0f.png"},208:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"第一课-c-的入门"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一课-c-的入门"}},[t._v("#")]),t._v(" 第一课 c++的入门")]),t._v(" "),n("h2",{attrs:{id:"一-c-介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-c-介绍"}},[t._v("#")]),t._v(" 一 C++介绍")]),t._v(" "),n("h3",{attrs:{id:"_1-发展历史"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-发展历史"}},[t._v("#")]),t._v(" 1 发展历史")]),t._v(" "),n("p",[t._v("C++ 由 Bjarne Stroustrup 于 1979 年在贝尔实验室开始设计开发的，由于C++ 进一步扩充和完善了 C 语言，是一种面向对象的程序设计语言 ，所以最初命名为带类的C 。C++ 是 C 的一个超集，事实上，任何合法的 C 程序都是合法的 C++ 程序。C++ 也是目前嵌入式 ( 无人驾驶 ) 的首选语言。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(202),alt:"version-1.322dd902"}})]),t._v(" "),n("h3",{attrs:{id:"_2-c-标准库和std命名空间"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-c-标准库和std命名空间"}},[t._v("#")]),t._v(" 2 C++标准库和std命名空间")]),t._v(" "),n("p",[t._v("此小节，引用博文：http://blog.itpub.net/31554696/viewspace-2645058/，此博文写的( ^_^ )不错嘛～")]),t._v(" "),n("p",[t._v("C++ 是在C语言的基础上开发的，早期的 C++ 还不完善，不支持命名空间，没有自己的编译器，而是将 C++ 代码翻译成C代码，再通过C编译器完成编译。这个时候的 C++ 仍然在使用C语言的库，stdio.h、stdlib.h、string.h 等头文件依然有效；此外 C++ 也开发了一些新的库，增加了自己的头文件，例如：")]),t._v(" "),n("blockquote",[n("ul",[n("li",[t._v("iostream.h：用于控制台输入输出头文件。")]),t._v(" "),n("li",[t._v("fstream.h：用于文件操作的头文件。")]),t._v(" "),n("li",[t._v("complex.h：用于复数计算的头文件。")])])]),t._v(" "),n("p",[t._v("和C语言一样，C++ 头文件仍然以 "),n("code",[t._v(".h")]),t._v(" 为后缀，它们所包含的类、函数、宏等都是全局范围的。")]),t._v(" "),n("p",[t._v("后来 C++ 引入了命名空间的概念，计划重新编写库，将类、函数、宏等都统一纳入一个命名空间，这个命名空间的名字就是 "),n("code",[t._v("std")]),t._v(" 。std 是 standard 的缩写，意思是“标准命名空间”。")]),t._v(" "),n("p",[t._v("但是这时已经有很多用老式 C++ 开发的程序了，它们的代码中并没有使用命名空间，直接修改原来的库会带来一个很严重的后果：程序员会因为不愿花费大量时间修改老式代码而极力反抗，拒绝使用新标准的 C++ 代码。")]),t._v(" "),n("p",[n("strong",[t._v("C++ 开发人员想了一个好办法，保留原来的库和头文件，它们在 C++ 中可以继续使用，然后再把原来的库复制一份，在此基础上稍加修改，把类、函数、宏等纳入命名空间 std 下，就成了新版 C++ 标准库。这样共存在了两份功能相似的库，使用了老式 C++ 的程序可以继续使用原来的库，新开发的程序可以使用新版的 C++ 库。")])]),t._v(" "),n("p",[t._v("为了避免头文件重名，新版 C++ 库也对头文件的命名做了调整，去掉了后缀 "),n("code",[t._v(".h")]),t._v(" ，所以老式 C++ 的 "),n("code",[t._v("iostream.h")]),t._v(" 变成了 "),n("code",[t._v("iostream")]),t._v(" ， "),n("code",[t._v("fstream.h")]),t._v(" 变成了 "),n("code",[t._v("fstream")]),t._v(" 。而对于原来C语言的头文件，也采用同样的方法，但在每个名字前还要添加一个 "),n("code",[t._v("c")]),t._v(" 字母，所以C语言的 "),n("code",[t._v("stdio.h")]),t._v(" 变成了 "),n("code",[t._v("cstdio")]),t._v(" ， "),n("code",[t._v("stdlib.h")]),t._v(" 变成了 "),n("code",[t._v("cstdlib")]),t._v(" 。")]),t._v(" "),n("p",[t._v("需要注意的是，旧的 C++ 头文件是官方所反对使用的，已明确提出不再支持，但旧的C头文件仍然可以使用，以保持对C的兼容性。实际上，编译器开发商不会停止对客户现有软件提供支持，可以预计，旧的 C++ 头文件在未来数年内还是会被支持。")]),t._v(" "),n("p",[t._v("下面是我总结的 C++ 头文件的现状：")]),t._v(" "),n("blockquote",[n("ol",[n("li",[n("p",[t._v("旧的 C++ 头文件，如 iostream.h、fstream.h 等将会继续被支持，尽管它们不在官方标准中。这些头文件的内容不在命名空间 std 中。")])]),t._v(" "),n("li",[n("p",[t._v("新的 C++ 头文件，如 iostream、fstream 等包含的基本功能和对应的旧版头文件相似，但头文件的内容在命名空间 std 中。注意：在标准化的过程中，库中有些部分的细节被修改了，所以旧的头文件和新的头文件不一定完全对应。")])]),t._v(" "),n("li",[n("p",[t._v("标准C头文件如 stdio.h、stdlib.h 等继续被支持。头文件的内容不在 std 中。")])]),t._v(" "),n("li",[n("p",[t._v("具有C库功能的新C++头文件具有如 cstdio、cstdlib 这样的名字。它们提供的内容和相应的旧的C头文件相同，只是内容在 std 中。")])])])]),t._v(" "),n("p",[n("strong",[t._v("可以发现，对于不带 "),n("code",[t._v(".h")]),t._v(" 的头文件，所有的符号都位于命名空间 std 中，使用时需要声明命名空间 std；对于带 "),n("code",[t._v(".h")]),t._v(" 的头文件，没有使用任何命名空间，所有符号都位于全局作用域。这也是 C++ 标准所规定的。")])]),t._v(" "),n("p",[t._v("不过现实情况和 C++ 标准所期望的有些不同，对于原来C语言的头文件，即使按照 C++ 的方式来使用，即 "),n("code",[t._v("#include <cstdio>")]),t._v(" 这种形式，那么符号可以位于命名空间 std 中，也可以位于全局范围中，请看下面的两段代码。")]),t._v(" "),n("ol",[n("li",[t._v("使用命名空间 std：\n::: details 点击查看代码")])]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('#include <cstdio>\nint main(){\n    std::printf("http://c.biancheng.net\\n");\n    return 0;\n}\n')])])]),n("p",[t._v(":::")]),t._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[t._v("不使用命名空间 std：")])]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('#include <cstdio>\nint main(){\n    printf("http://c.biancheng.net\\n");\n    return 0;\n}\n')])])]),n("p",[t._v("这两种形式在 Microsoft Visual C++ 和 GCC 下都能够编译通过，也就是说，大部分编译器在实现时并没有严格遵循标准，它们对两种写法都支持，程序员可以使用 std 也可以不使用。")]),t._v(" "),n("p",[t._v("第 1) 种写法是标准的，第 2) 种不标准，虽然它们在目前的编译器中都没有错误，但我依然推荐使用第 1) 种写法，因为标准写法会一直被编译器支持，非标准写法可能会在以后的升级版本中不再支持。")]),t._v(" "),n("h4",{attrs:{id:"使用c-的头文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用c-的头文件"}},[t._v("#")]),t._v(" 使用C++的头文件")]),t._v(" "),n("p",[t._v("虽然 C++ 几乎完全兼容C语言，C语言的头文件在 C++ 中依然被支持，但 C++ 新增的库更加强大和灵活，请读者尽量使用这些 C++ 新增的头文件，例如 iostream、fstream、string 等。")]),t._v(" "),n("p",[t._v("前面几节我们使用了C语言的格式输出函数 printf，引入了C语言的头文件 stdio.h，将C代码和 C++ 代码混合在了一起，我不推荐这样做，请尽量使用 C++ 的方式。下面的例子演示了如何使用 C++ 库进行输入输出：")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('#include <iostream>#include <string>int main(){\n//声明命名空间std\nusing namespace std;\n//定义字符串变量\nstring str;\n//定义 int 变量\nint age;\n//从控制台获取用户输入\ncin>>str>>age;\n//将数据输出到控制台\ncout<<str<<"已经成立"<<age<<"年了！"<<endl;\nreturn 0;\n}\n')])])]),n("p",[t._v("string 是 C++ 中的字符串类，初学者可以将 string 看做一种内置的数据类型，就像 int、float 等，可以用来定义变量。cin 用于从控制台获取用户输入，cout 用于将数据输出到控制台,读者暂时不需要深入了解这段代码的细节，只需要留意 "),n("code",[t._v("using namespace std;")]),t._v(" ，它声明了命名空间 std，后续如果有未指定命名空间的符号，那么默认使用 std，代码中的 string、cin、cout 都位于命名空间 std。")]),t._v(" "),n("p",[t._v("在 main() 函数中声明命名空间 std，它的作用范围就位于 main() 函数内部，如果在其他函数中又用到了 std，就需要重新声明，请看下面的例子：")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('#include <iostream>\nvoid func(){\n//必须重新声明\nusing namespace std;\ncout<<"http://c.biancheng.net"<<endl;\n}\nint main(){\n    //声明命名空间std\n    using namespace std;\n    cout<<"C语言中文网"<<endl;func();\n    return 0;\n}\n')])])]),n("p",[t._v("如果希望在所有函数中都使用命名空间 std，可以将它声明在全局范围中，例如：")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('#include <iostream>\n//声明命名空间std\nusing namespace std;\nvoid func(){\n    cout<<"http://c.biancheng.net"<<endl;\n}\nint main(){\n    cout<<"C语言中文网"<<endl;\n    func();\n    return 0;\n}\n')])])]),n("h2",{attrs:{id:"二-环境准备"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-环境准备"}},[t._v("#")]),t._v(" 二 环境准备")]),t._v(" "),n("h3",{attrs:{id:"_1-安装环境"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装环境"}},[t._v("#")]),t._v(" 1. 安装环境")]),t._v(" "),n("p",[t._v("C++ 是一种编译语言，需要安装编译环境。 此类环境有： "),n("code",[t._v("mingw")]),t._v(" | "),n("code",[t._v("cygwin")]),t._v(" | "),n("code",[t._v("msvc")]),t._v(" ...")]),t._v(" "),n("p",[t._v("官网： http://www.mingw.org")]),t._v(" "),n("h3",{attrs:{id:"_2-安装开发工具"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-安装开发工具"}},[t._v("#")]),t._v(" 2. 安装开发工具")]),t._v(" "),n("p",[t._v("开发工具种类繁多，有"),n("code",[t._v("VS")]),t._v(" | "),n("code",[t._v("Dev-C++")]),t._v(" | "),n("code",[t._v("code lite")]),t._v(" | "),n("code",[t._v("clion")]),t._v("| "),n("code",[t._v("Qt Creator")])]),t._v(" "),n("h2",{attrs:{id:"三-入门示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三-入门示例"}},[t._v("#")]),t._v(" 三 入门示例")]),t._v(" "),n("h3",{attrs:{id:"_1-hello-world"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-hello-world"}},[t._v("#")]),t._v(" 1.hello world")]),t._v(" "),n("p",[t._v("编写main.cpp文件,代码如下:")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('#include<iostream>\n\nint main (int argc,char **argv){\n\n    std::cout << "hello world !" << std::endl;\n    \n    return 0 ;\n}\n')])])]),n("blockquote",[n("p",[n("code",[t._v("#include<iostream>")]),t._v(" ： 引入输入输出库")]),t._v(" "),n("p",[n("code",[t._v("int main(){}")]),t._v(" ： 主函数入口")]),t._v(" "),n("p",[n("code",[t._v("std::")]),t._v(" .... 输出打印")]),t._v(" "),n("p",[n("code",[t._v("return 0")]),t._v(" : 函数返回值，一般0 表示正常执行返回")]),t._v(" "),n("p",[n("code",[t._v("main")]),t._v("函数是C++程序的__入口函数__，C++标准要求"),n("code",[t._v("main")]),t._v("函数的返回值类型为"),n("code",[t._v("int")]),t._v("。 "),n("strong",[t._v("0 表示正常退出")])]),t._v(" "),n("blockquote",[n("p",[t._v("当"),n("code",[t._v("main")]),t._v("函数的返回值为"),n("code",[t._v("int")]),t._v("，而函数内并没有出现return语句时，同样可以通过编译并正常运行。")]),t._v(" "),n("p",[t._v("这是因为编译器在"),n("code",[t._v("main")]),t._v("函数的末尾__自动添加了"),n("code",[t._v("return 0;")]),t._v("的语句__。")]),t._v(" "),n("p",[t._v("所以，"),n("code",[t._v("main")]),t._v("函数是C++程序经过__特殊处理的函数__。")]),t._v(" "),n("p",[t._v("其他的返回值类型不是"),n("code",[t._v("void")]),t._v("的函数，如果没有使用return语句，编译器将报错。")])])]),t._v(" "),n("h3",{attrs:{id:"_2-命令行编译"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-命令行编译"}},[t._v("#")]),t._v(" 2.命令行编译")]),t._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[t._v("g++ -Wall -std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("c++14 main.cpp -o abc.exe\n")])])]),n("blockquote",[n("p",[n("code",[t._v("g++")]),t._v(": 是编译工具.")]),t._v(" "),n("p",[n("code",[t._v("-Wall")]),t._v(": 编译过程中显示所有的警告.")]),t._v(" "),n("p",[n("code",[t._v("-std=c++14")]),t._v(": 使用c++14版本进行编译.")]),t._v(" "),n("p",[n("code",[t._v("main.cpp")]),t._v(": 要编译的cpp文件")]),t._v(" "),n("p",[t._v("编译执行完成后,Windows下默认生成a.exe文件,linux下默认生成a.o文件,macos下默认生成a.out文件")]),t._v(" "),n("p",[t._v("-o : 指定编译生成文件名称")])]),t._v(" "),n("h2",{attrs:{id:"四-基本知识点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四-基本知识点"}},[t._v("#")]),t._v(" 四 基本知识点")]),t._v(" "),n("h3",{attrs:{id:"_1-注释"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-注释"}},[t._v("#")]),t._v(" 1 注释")]),t._v(" "),n("h4",{attrs:{id:"a-单行注释"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-单行注释"}},[t._v("#")]),t._v(" A 单行注释")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('// 我是c++的单行注释\nstd::cout << "hello world" << std::endl;\n')])])]),n("h4",{attrs:{id:"b-多行注释"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#b-多行注释"}},[t._v("#")]),t._v(" B 多行注释")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('/*\n我是c++的多行注释\n我可以写多行\n*/\nstd::cout << "hello world" << std::endl;\n')])])]),n("h3",{attrs:{id:"_2-基本数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-基本数据类型"}},[t._v("#")]),t._v(" 2 基本数据类型")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("数据类型")]),t._v(" "),n("th",[t._v("声明")]),t._v(" "),n("th",[t._v("备注")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("integer")]),t._v(" "),n("td",[t._v("int")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("floating point")]),t._v(" "),n("td",[t._v("float")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("double floating point")]),t._v(" "),n("td",[t._v("double")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("character")]),t._v(" "),n("td",[t._v("char")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("boolean")]),t._v(" "),n("td",[t._v("bool")]),t._v(" "),n("td",[t._v("false为0 true为非0")])]),t._v(" "),n("tr",[n("td",[t._v("valueless")]),t._v(" "),n("td",[t._v("void")]),t._v(" "),n("td")])])]),t._v(" "),n("h4",{attrs:{id:"a-声明变量和初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-声明变量和初始化"}},[t._v("#")]),t._v(" A 声明变量和初始化")]),t._v(" "),n("blockquote",[n("p",[t._v("变量类型 变量名字 = 变量值 ;")])]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("int main(){\n    \n    //先声明\n    int age ;\n    double price;\n    ...\n    //后初始化\n    age = 10 ;\n    price = 20.3;\n\n    //声明及初始化\n    int age = 20 ;\n    \n    return 0 ;\n}\n")])])]),n("blockquote",[n("p",[t._v("在C++中，对于变量的初始化有好几种方式，如下：")])]),t._v(" "),n("div",{staticClass:"language-C++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("int age ; //未初始化\n\nint age = 21 ; // C 方式初始化\n\nint age  (21); //构造方法初始化\n\nint age {21} ; //c++ 11标准开始的方式\n")])])]),n("h4",{attrs:{id:"b-变量命名规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#b-变量命名规则"}},[t._v("#")]),t._v(" B 变量命名规则")]),t._v(" "),n("blockquote",[n("ol",[n("li",[t._v("可以包含字母 、 数字 和下划线")]),t._v(" "),n("li",[t._v("必须以字母或者下划线开始")])]),t._v(" "),n("p",[t._v("注意：在C++中，大写字母和小写字母被认为是两个不同的字符。因此，sum和SUM是两个不同的变量名。一般地，变量名用小写字母表示，与人们日常习惯一致，以增加可读性。应注意变量名不能与C++的关键字、系统函数名和类名相同。")])]),t._v(" "),n("h4",{attrs:{id:"c-常量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#c-常量"}},[t._v("#")]),t._v(" C 常量")]),t._v(" "),n("blockquote",[n("p",[t._v("常量其实和变量没有多大区别， 有名字， 占据存储空间，可以是任何的基本类型，但只有一点不同，常量的值不允许变更。C++中的常量的声明需要使用 "),n("code",[t._v("const")]),t._v(" 关键字，而python中的常量默认约定是全大写表示。")])]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("int main(){\n    \n    const double pi {3.1415926};\n    const int months_in_year{12};\n\n    pi = 2.5 ; //将会出现编译错误\n    \n    return 0 ;\n}\n")])])]),n("h4",{attrs:{id:"d-变量长度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#d-变量长度"}},[t._v("#")]),t._v(" D 变量长度")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("#include<iostream>\n\nint main(){\n   \n    double a = 20.0;\n    sizeof(a); //8\n\n    sizeof(int); //4\n    \n    return 0 ;\n}\n")])])]),n("h2",{attrs:{id:"五-条件判断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五-条件判断"}},[t._v("#")]),t._v(" 五 条件判断")]),t._v(" "),n("h3",{attrs:{id:"_1-条件语法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-条件语法"}},[t._v("#")]),t._v(" 1 条件语法")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("if (条件1) {\n   语句1;\n   语句2；\n   ...\n}else if (条件2) {\n   语句1;\n   语句2；\n   ...\n}else {\n   语句1;\n   语句2；\n   ...\n}\n")])])]),n("h3",{attrs:{id:"_2-关系运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-关系运算符"}},[t._v("#")]),t._v(" 2 关系运算符")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Operator")]),t._v(" "),n("th",[t._v("Python")]),t._v(" "),n("th",[t._v("C++")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("equal")]),t._v(" "),n("td",[t._v("==")]),t._v(" "),n("td",[t._v("==")])]),t._v(" "),n("tr",[n("td",[t._v("not equal")]),t._v(" "),n("td",[t._v("!=")]),t._v(" "),n("td",[t._v("!=")])]),t._v(" "),n("tr",[n("td",[t._v("greater than")]),t._v(" "),n("td",[t._v(">")]),t._v(" "),n("td",[t._v(">")])]),t._v(" "),n("tr",[n("td",[t._v("less than")]),t._v(" "),n("td",[t._v("<")]),t._v(" "),n("td",[t._v("<")])]),t._v(" "),n("tr",[n("td",[t._v("greater than or equal")]),t._v(" "),n("td",[t._v(">=")]),t._v(" "),n("td",[t._v(">=")])]),t._v(" "),n("tr",[n("td",[t._v("less than or equal")]),t._v(" "),n("td",[t._v("<=")]),t._v(" "),n("td",[t._v("<=")])])])]),t._v(" "),n("h3",{attrs:{id:"_3-逻辑运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-逻辑运算符"}},[t._v("#")]),t._v(" 3 逻辑运算符")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Operator")]),t._v(" "),n("th",[t._v("Python")]),t._v(" "),n("th",[t._v("C++")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("and")]),t._v(" "),n("td",[t._v("and")]),t._v(" "),n("td",[t._v("&&")])]),t._v(" "),n("tr",[n("td",[t._v("or")]),t._v(" "),n("td",[t._v("or")]),t._v(" "),n("td",[t._v("||")])]),t._v(" "),n("tr",[n("td",[t._v("not")]),t._v(" "),n("td",[t._v("not")]),t._v(" "),n("td",[t._v("!")])])])]),t._v(" "),n("h3",{attrs:{id:"_4-例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-例子"}},[t._v("#")]),t._v(" 4 例子")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('double height = 220\ndouble weight = 250\n    \nif(height > 190 && weight > 200){\n    std::cout << "可以成为篮球运动员" << std::endl;\n}\n')])])]),n("h3",{attrs:{id:"_5-三元运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-三元运算符"}},[t._v("#")]),t._v(" 5 三元运算符")]),t._v(" "),n("blockquote",[n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("括号里面的表达式得出一个"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v("类型的值，若为"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" ，则执行expr1表达式 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" 如果是"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("，那么执行expr2表达式。\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cond_expr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" expr1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" expr2 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),n("h3",{attrs:{id:"_6-switch语句"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-switch语句"}},[t._v("#")]),t._v(" 6 switch语句")]),t._v(" "),n("blockquote",[n("p",[t._v("python没有switch")]),t._v(" "),n("ul",[n("li",[t._v("注意：")])]),t._v(" "),n("ol",[n("li",[t._v("swtich只能做等价条件判断，并且判断的只能是字符或者整型数字")]),t._v(" "),n("li",[t._v("一次只会执行一个case，如果没有匹配，会执行默认的default分支")]),t._v(" "),n("li",[t._v("如果某个case缺失break语句，那么会连带执行下一个case分支。")])])]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v(" char level = 'A';\n    switch (level){\n        case 'A':\n            std::cout << \"优秀\" << std::endl;\n            break;\n        case 'B':\n            std::cout << \"良好\" << std::endl;\n            break;\n        case 'C':\n            std::cout << \"及格\" << std::endl;\n            break;\n        case 'D':\n            std::cout << \"仍需继续努力\" << std::endl;\n            break;\n        default:\n            std::cout << \"输入错误。\" << std::endl;\n            break;\n    }\n")])])]),n("h2",{attrs:{id:"六-命名空间"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六-命名空间"}},[t._v("#")]),t._v(" 六 命名空间")]),t._v(" "),n("blockquote",[n("p",[t._v("在 C++ 应用程序中,可能会写一个名为 a 的变量，在另一个可用的库中也存在一个相同的变量 a。这样，编译器就无法判断您所使用的是哪一个。因此，引入了"),n("strong",[t._v("命名空间")]),t._v("这个概念。它可作为附加信息来区分不同库中相同名称的函数、类、变量等。使用了命名空间即定义了上下文。本质上，命名空间就是定义了一个范围。")])]),t._v(" "),n("h3",{attrs:{id:"_1-自定义命名空间"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-自定义命名空间"}},[t._v("#")]),t._v(" 1 自定义命名空间")]),t._v(" "),n("blockquote",[n("p",[t._v("使用命名空间范围内的成员（变量、函数、类），需要使用 域操作符*(scope operator) "),n("code",[t._v("::")])])]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//深圳的张三\nnamespace shenzhen{\n    string name = "张三";\n}\n\n//武汉的张三\nnamespace wuhan{\n    string name = "张三";\n}\n\nint main() {\n    cout << shenzhen::name << endl;\n    return 0;\n}\n')])])]),n("h3",{attrs:{id:"_2-使用using指令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用using指令"}},[t._v("#")]),t._v(" 2 使用using指令")]),t._v(" "),n("blockquote",[n("p",[t._v("可以使用 "),n("strong",[t._v("using namespace")]),t._v(" 指令，这样在使用命名空间时就可以不用在前面加上命名空间的名称。这个指令会告诉编译器，后续的代码将使用指定的命名空间中的名称。")])]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('#include <iostream>\nusing namespace std;\n\nint main(){\n    count<<"hi c++" << endl;\n    return 0 ;\n}\n')])])]),n("h2",{attrs:{id:"七-数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#七-数组"}},[t._v("#")]),t._v(" 七 数组")]),t._v(" "),n("h3",{attrs:{id:"_1-python-和-c-的对比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-python-和-c-的对比"}},[t._v("#")]),t._v(" 1 python 和 c++ 的对比")]),t._v(" "),n("blockquote",[n("p",[n("code",[t._v("c++")]),t._v("的数组实际上和"),n("code",[t._v("python")]),t._v("的 "),n("code",[t._v("list")]),t._v(" 差不多，都是具有下标（索引） ， 稍有不同的是，"),n("code",[t._v("python")]),t._v("的"),n("code",[t._v("list")]),t._v("不区分类型，而"),n("code",[t._v("c++")]),t._v("的数组必须是同一类型。")])]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[t._v("scores"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("85")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("88")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("90")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("77.5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"张三"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("int scores[]{100,85,88,90}\n")])])]),n("h3",{attrs:{id:"_2-声明和初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-声明和初始化"}},[t._v("#")]),t._v(" 2 声明和初始化")]),t._v(" "),n("blockquote",[n("p",[t._v("数组是一系列相同类型的元素，放置在连续的内存位置，数组中的元素都可以通过索引来单独操作它们。 若查看某个变量存储地址可以使用 取地址符 "),n("code",[t._v("&")])])]),t._v(" "),n("h4",{attrs:{id:"a-声明数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-声明数组"}},[t._v("#")]),t._v(" A 声明数组")]),t._v(" "),n("blockquote",[n("p",[t._v("仅仅声明，而没有初始化的数组，内部的元素无法得到保证，系统会随机进行赋值")])]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("//数组类型 数组名称  [元素个数];\n\nint scores [5]; //表示5个元素的数组\n")])])]),n("p",[t._v("![](./cpp_image/2019-11-15 10-02-33屏幕截图.png)")]),t._v(" "),n("h4",{attrs:{id:"b-初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#b-初始化"}},[t._v("#")]),t._v(" B 初始化")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("int main(){\n    //数组类型 数组名称  [元素个数]{初始化列表}\n\n    //1. 声明后再初始化\n    int scores [5];\n    scores[0] = 11;\n    scores[1] = 22;\n    scores[2] = 33;\n    scores[3] = 44;\n    scores[4] = 55;\n\n\n    //2. 声明并初始化\n    int scores [5]{100,89,95,70,80};\n\n    int socres [10]{88,75}; //剩下的都会以0占位，只初始化了前两位\n\n    int socres [10]{0};; // 表示10个长度的数组，每个元素都是0\n\n    //3. 自动推算数组大小\n    int socres[]{22,33,44,55,66}; //数组长度没有指定，根据后面初始化长度来推断。\n\treturn 0 ;\n}\n")])])]),n("h3",{attrs:{id:"_3-访问数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-访问数组"}},[t._v("#")]),t._v(" 3 访问数组")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("获取数组中的某个元素")]),t._v(" "),n("blockquote",[n("p",[t._v("可以使用索引来获取 , 型如： "),n("code",[t._v("数组名称[元素索引]")])])])])]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('int main(){\n   \n    //声明并初始化数组\n    int scores [5]{100,89,95,70,80};\n\n    std::cout<<"数组的第一个元素是: "<< scores[0]<<std::endl;\n    std::cout<<"数组的第二个元素是: "<< scores[1]<<std::endl;\n    std::cout<<"数组的第三个元素是: "<< scores[2]<<std::endl;\n    std::cout<<"数组的第四个元素是: "<< scores[3]<<std::endl;\n    std::cout<<"数组的第五个元素是: "<< scores[4]<<std::endl;\n\n\n    //越界，不会报错，但是输出内容不是我们想看到的\n    std::cout<<"数组的第一个元素是: "<< scores[5]<<std::endl; \n\n\n    //修改指定位置的元素\n    scores[0] = 66;\n    \n    return 0 ;\n}\n')])])]),n("ul",[n("li",[n("p",[t._v("遍历数组")]),t._v(" "),n("blockquote",[n("p",[t._v("c++的数组，并没有提供获取长度的方法，所以不能直接遍历。一种是直接指定遍历的长度，一种是通过代码计算出数组的长度 ,一种是使用c++11提供的基于范围的for循环")])])])]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("int main(){\n    //定义数组\n    int  scores[]{100,95,97,88,85,80,75};\n\n    //直接指定数组\n    for(int i = 0; i < 7; i++){\n        std::cout << scores[i] << std::endl;\n    }\n    \n    //手动计算数组长度\n    int length = sizeof(scores) / sizeof(int);\n    for(int i = 0 ; i < length; i++){\n         std::cout << scores[i] << std::endl;\n    }\n\n    //c++11 提供的for循环 , 基于范围的for循环可以不再关心迭代器的概念，只需要关系容器中的元素类型即可，同时也不必显式的给出容器的开头和结尾。\n    for(int score : scores){\n          std::cout <<cores[i] << std::endl;\n    }\n    return 0 ;\n}\n")])])]),n("h3",{attrs:{id:"_4-多维数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-多维数组"}},[t._v("#")]),t._v(" 4 多维数组")]),t._v(" "),n("blockquote",[n("p",[t._v("数组里面的元素存储的还是数组，即可称之为多维数组。二维数组是常见的多维数组，再多维度的数组阅读起来就稍微有点复杂了。二维数组的操作实际上实际上和一维数组并没有多大区别。")])]),t._v(" "),n("h4",{attrs:{id:"声明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#声明"}},[t._v("#")]),t._v(" 声明")]),t._v(" "),n("blockquote",[n("p",[t._v("数组类型 数组名称[x] [y]; x可以认为是有多少行 ， y可以认为是有多少列。多维数组无法进行长度推断，所以具体到行列的长度")])]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const int rows{3};\nconst int cols{4};\nint movie_rating [rows][clos];\n")])])]),n("h4",{attrs:{id:"初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[t._v("#")]),t._v(" 初始化")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const int rows{3};\nconst int cols{4};\nint movie_rating [rows][cols]{\n        {0,4,3,5},\n        {2,3,4,5},\n        {1,4,4,5}\n};\n")])])]),n("h2",{attrs:{id:"八-字符串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#八-字符串"}},[t._v("#")]),t._v(" 八 字符串")]),t._v(" "),n("h3",{attrs:{id:"_1-c风格的字符串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-c风格的字符串"}},[t._v("#")]),t._v(" 1 C风格的字符串")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("char greeting[6] = {'H', 'e', 'l', 'l', 'o', '\\0'};\n\n可以简写成：\n\nchar greeting[] = \"Hello\";\n")])])]),n("p",[n("img",{attrs:{src:s(203),alt:""}})]),t._v(" "),n("h3",{attrs:{id:"_2-c风格的字符串操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-c风格的字符串操作"}},[t._v("#")]),t._v(" 2 C风格的字符串操作")]),t._v(" "),n("h4",{attrs:{id:"a-遍历字符串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-遍历字符串"}},[t._v("#")]),t._v(" A 遍历字符串")]),t._v(" "),n("blockquote",[n("p",[t._v("字符串实际上背后还是一个数组，所以可以使用数组遍历的手法来获取每一个字符")])]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('int main(){\n    \n\t//最后总会跟着一个\\0的空字符，此时括号中如果写长度，必须大于等于6\n\tchar  name[] = "hello";\n\n    for (int i = 0; i < sizeof(name ) / sizeof(char); ++i) {\n        std::cout << name[i] << std::endl;\n    }\n}\n')])])]),n("h4",{attrs:{id:"b-其他操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#b-其他操作"}},[t._v("#")]),t._v(" B 其他操作")]),t._v(" "),n("blockquote",[n("p",[t._v("C语言中提供了针对字符串操作的大量函数，不过在使用之前，需要先引入 "),n("code",[t._v("#include <cstring>")])])]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('#include <iostream>\n#include <cstring>\n\nusing namespace std;\nint main (){\n    char name[] = "zhangsan";\n    char name2[8];\n    //ctrl + p\n    //1. 拷贝  - 完全拷贝\n    //strcpy(name2 , name);\n    //拷贝指定长度\n    strncpy(name2 , name , 3);\n    cout << "name2=" << name2 << endl;\n\n    //获取字符的长度\n    cout << "name2.length=" << strlen(name2) << endl;\n\n    //字符串的追加\n    char firname[] ="张三";\n    char lastname[]="风";\n    strcat(firname , lastname);\n    cout << "firname=" << firname << endl;\n    cout << "lastname=" << lastname << endl;\n\n    //比较字符串是否相等  按照字母表顺序比较，如果第一个 > 第二个  : 1\n    //如果第一个 <  第二个 :  -1  如果这两正好一样 ： 0\n    char a[] = "ab";\n    char b[] = "aa";\n\n    //cout << (a == b) << endl; //无法判断\n    cout << strcmp(a , b) << endl;\n\n    char address[]="abcd123ttyy";\n    //查找字符在字符串中出现的位置 可以看成是截取字符串\n    cout << strchr(address , \'z\') << endl;\n    \n    return 0 ;\n}\n')])])]),n("h3",{attrs:{id:"_3-c-字符串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-c-字符串"}},[t._v("#")]),t._v(" 3 C++字符串")]),t._v(" "),n("blockquote",[n("p",[t._v("C++ 标准库提供了 "),n("strong",[t._v("string")]),t._v(" 类类型,支持上述所有的操作，另外还增加了其他更多的功能。需要引入 "),n("code",[t._v("#include <string>")]),t._v(" ，由于string类声明在命名空间 std ,所以在使用的首要注意 命名空间的联合使用")])]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('#include <iostream>\n\n//导入string头\n#include <string>\n\nusing namespace std;\n\nint main (){\n    \n    string  name = "zhangsan";\n    string address("北京");\n    string gender{"男"};\n    cout << "name= " << name << endl;\n    cout << "address= " << address << endl;\n    cout << "gender= " << gender << endl;\n    cout << name[0] << endl;\n   \n    return 0 ;\n}\n')])])]),n("h3",{attrs:{id:"_4-c-字符串操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-c-字符串操作"}},[t._v("#")]),t._v(" 4 C++ 字符串操作")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('#include <iostream>\n\n//导入string头\n#include <string>\n\nusing namespace std;\n\nint main (){\n    \n    //1. 拼接字符串\n    string firstname = "张";\n    string lastname = "丽丽";\n\n    string fullname = firstname + lastname;\n    cout << "fullname =" << fullname << endl;\n\n    //2. 获取指定下标的字符  中文在GBK编码下占据的字节是 2个字节，在UTF-8的编码下占据的字节是3个字节。\n    //使用下标的方式获取到的只是指定位置下的字节数据。\n    string str ="我是中国人我深爱着我的祖国";\n    cout << str[1]  << str.at(2) << str[3] <<endl;\n\n    string str2 ="abc123456789";\n    cout << str2[4]  << str2.at(5) <<endl;\n/*  char a = \'a\';\n    char b = \'一\';*/\n\n    //3. 遍历字符串，实际上就是遍历数组\n    string str3 ="abc123456789";\n    for(int i = 0 ; i < str3.size() ; i++){\n        cout << str3[i] << endl;\n    }\n\n    //如果不需要使用下标。\n    for(char s : str3){\n        cout << "s= " << s << endl;\n    }\n\n    //4. 字符串的比较\n    string str4 = "aa";\n    string str5 = "ab";\n\n    cout << ( str4 == str5 )<< endl;\n\n    //5. 截取字符串\n    string str6 = "abc123def456";\n\n    //从第0个位置开始截取字符， 截取3个长度的字符  abc\n    cout << str6.substr(0 ,  3) << endl;\n\n    //查找1这个字符在str6中的下标\n    cout << str6.find("1") << endl;\n\n  //截取def\n   cout <<  str6.substr(str6.find("d"), 3) <<endl;\n\t\n    // 获取字符串长度\n    bool flag = str6.length() == str6.size() ;\n \n    cout <<  str6.length()  << " : " <<  str6.size() <<endl;\n\n    return 0 ;\n}\n')])])])])}),[],!1,null,null,null);a.default=e.exports}}]);